Hello Git.

$mkdir dir//创建一个空目录

$cd dir//进入创建的空目录

$git init//将创建的目录变成Git可以管理的仓库

$git add file//将文件添加到Git暂存区

$git status//查看暂存区

$git commit -m "some modified records"//将暂存区中的改动提交到仓库

$git log//显示从最近到最远的提交记录
	git log --pretty=oneline//git log的简约版本

$git reset --hard HEAD^//回退到上一个版本；HEAD表示当前版本
	git reset --hard commitid//回退到指定的版本
	
$git reflog//记录每一次命令

$git diff HEAD -- filename//提交后，使用此命令查看工作区与版本库中最新版本的区别

$git checkout -- file//撤销工作区的全部修改

$git reset HEAD -- file//撤销暂存区，将暂存区的修改清除

$git rm file//删除文件，该命令相当于：删除文件->git add

$git branch//查看分支，git会在当前分支前用“*”以示区分

$git branch <name>//创建分支

$git checkout -b <name>//创建并切换到目标分支

$git checkout <name>//切换分支

$git merge <name>//将分支name合并至当前分支上

$git branch -d <name>//删除分支name

$git remote add origin https://github.com/repositoryPath//将本地仓库与远程仓库<origin>关联

$git push -u origin master//用于首次推送分支，

$git push origin master//将本地分支的最新修改推送到GitHub

$git log --graph --pretty=oneline --abbrev-commit//用于查看分支的合并情况

$git push origin :<branch>//该命令用于删除远程仓库"origin"中的分支"branch"

$git merge --no-ff -m "some descriptions" <branch>//合并分支时禁用Fast forward模式并创建新的commit，可用git log查看分支历史

$git stash//将当前工作现场储藏起来

$git stash list//用于查看存储的工作现场列表

$git stash apply//恢复存储的工作现场，不删除stash内容|亦可恢复指定工作现场

$git stash drop//删除stash内容，亦可删除指定工作现场

$git stash pop//恢复工作现场并删除stash内容

$git remote//查看远程库的信息

$git remote -v//查看远程库的详细信息

$git pull//将远程库中最新的提交抓下来并在本地合并

$git branch --set-upstream-to=<remote host>/<remote branch> <local branch>//指定本地分支与远程分支的链接

$git tag <tag_name>//打一个新标签

$git tag//查看所有标签

$git show <tagname>//查看指定标签信息

$git tag -d <tagname>//删除单个标签

$git push origin <tagname>//推送单个标签至远程

$git push origin --tags//一次性推送全部尚未推送至远程的本地标签

$git push origin :refs/tags/<tagname>//删除远程标签

$git fetch origin tag <tagname>//获取指定的某一个版本
